# please make sure to escape any ',' in strings that you don't want turned into an array

# The name of your app in Okta.
OPP.appName = OPP_LDAP
#Replace {Okta_application_name} with actual Okta application name
OPP.SchemaName=urn:okta:{Okta_application_name}:1.0:user:custom

# Use a whitelist to filter out users with different domains. Can be a list.
OPP.whitelistForUsernames = okta.com
OPP.whitelist = false

#############################################################
# Settings that describe the structure of your LDAP server. #
#############################################################
# The baseDn is what the connector will bill all DNs from.
ldap.baseDn=

# The connector will append userDn and groupDn wherever necessary. 
#replace {group_dn} with actual DN. Ex: ou=Groups\,o=org
ldap.groupDn={group_dn}
#replace {user_dn} with actual user DN. Ex: ou=people
ldap.userDn={user_dn}

# A prefix that the connector will prepend to the DN
ldap.userPre=cn=
ldap.groupPre=cn=

# use the entire username for inserting into DN, if false only pulls beginning before @example.com
ldap.useEntireUsername = true

# An example dn that the connector may generate: "cn=" + user.getUserName() + ",ou=People,dc=example,dc=com"
# The connector will then use this dn to create a subcontext or destroy one.

# Filters that the connector uses when rebuilding the cache after a restart.
ldap.userFilter=(objectClass=inetOrgPerson)
ldap.groupFilter=(objectClass=groupOfNames)

# The connector will query for "ou=People,dc=example,dc=com" with filter (objectClass=OpenLDAPperson) when
# rebuilding the cache.

###############################
# Settings to connect to LDAP #
###############################
ldap.initialContextFactory=com.sun.jndi.ldap.LdapCtxFactory
ldap.url=<<HOSTNAME>>
ldap.securityAuthentication=simple
ldap.securityPrincipal=<<PRINCIPAL_NAME>>
ldap.retryParam=5
ldap.sleepTimeParam=5000

##############################################################
# Properties used for Password Encryption                    #
# Generation of Salt and Encryption is via a separate utility#
##############################################################
ldap.encryptedPassword=<<ENCRYPTED_PASSWORD>>
ldap.encryptedSaltKey=<<ENCRYPTED_SALT>>
ldap.ldapSecurityKeyFilePath=<<SECURITY_FILE_PATH>>

######################################
# Settings to describe Users in LDAP #
######################################
# user class can be an array or single object - put in auxiliary classes with no required attributes
ldap.userClass=inetOrgPerson
#this property specifies the container name in Ldap
ldap.currentUserContainer=ou=037
#Replace {unique_id} with the unique field on the target system
ldap.currentUniqueKeyField={unique_id}

# connector will parse as Okta attr, ldap attr
# The properties variable name doesn't matter, just needs to start with OPP.userCoreMap
# The Okta attr name DOES matter, they are hardcoded, do not change them.
OPP.userCoreMap.login=userName,cn
OPP.userCoreMap.familyName=familyName,sn
OPP.userCoreMap.givenName=givenName,givenName
OPP.userCoreMap.formattedName=formatted,givenName
#replace {externalId} with the unique attribute on the target system
OPP.userCoreMap.id=id,{externalId}
OPP.userCoreMap.password=password,userpassword
#replace {emailAddress} with the email attribute from target system (ex: In Ldap it is primaryEmail)
OPP.userCoreMap.primaryEmail = primaryEmail, {emailAddress}
#replace {mobileNumber} with the mobile attribute on the target system
OPP.userCoreMap.mobilePhone=mobilePhone,{mobileNumber}

# connector will parse each line as Ldap attrt, value type, schema name, field name
# The properties variable name doesn't matter, just needs to start with OPP.userCustomMap
# The values do not  matter, nothing is hard coded.
# whitespace shouldn't matter here
OPP.userCustomMap.locale=preferredLanguage,string,urn:okta:{Okta_application_name}:1.0:user:custom,locale
OPP.userCustomMap.preferredName=preferredName,string,urn:okta:{Okta_application_name}:1.0:user:custom,displayName

#######################################
# Settings to describe Groups in LDAP #
#######################################
# group class can be an array or single objectc
ldap.groupClass=groupOfNames

# connector will parse as Okta attr, ldap attr
# The properties variable name doesn't matter, just needs to start with OPP.userCustomMap
# The Okta attr name DOES matter, they are hardcoded, do not change them.
OPP.groupCoreMap.id=id,cn
OPP.groupCoreMap.member=members,member